package NewLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;

public class StructureAspectDescriptor implements jetbrains.mps.smodel.runtime.StructureAspectDescriptor {
  public StructureAspectDescriptor() {
  }

  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b, conceptFqName)) {
      case 0:
        return new ConceptDescriptorBuilder("NewLanguage.structure.Action").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("nextActuatorState", "delay").references("actuator").create();
      case 1:
        return new ConceptDescriptorBuilder("NewLanguage.structure.Actuator").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("pinNumber", "type", "io_type").abstract_().alias("actuator", "").create();
      case 2:
        return new ConceptDescriptorBuilder("NewLanguage.structure.ArduinoBoard").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.execution.util.structure.IMainClass").properties("frequency").children(new String[]{"actuator", "state", "macros", "konami"}, new boolean[]{true, true, true, false}).alias("arduinoboard", "").create();
      case 3:
        return new ConceptDescriptorBuilder("NewLanguage.structure.Button").super_("NewLanguage.structure.Actuator").parents("NewLanguage.structure.Actuator").create();
      case 4:
        return new ConceptDescriptorBuilder("NewLanguage.structure.Buzzer").super_("NewLanguage.structure.Actuator").parents("NewLanguage.structure.Actuator").create();
      case 5:
        return new ConceptDescriptorBuilder("NewLanguage.structure.Condition").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("actuatorState").references("actuatorRef").create();
      case 6:
        return new ConceptDescriptorBuilder("NewLanguage.structure.Joystick").super_("NewLanguage.structure.Actuator").parents("NewLanguage.structure.Actuator").properties("xAxisPin", "yAxisPin").create();
      case 7:
        return new ConceptDescriptorBuilder("NewLanguage.structure.Led").super_("NewLanguage.structure.Actuator").parents("NewLanguage.structure.Actuator").create();
      case 8:
        return new ConceptDescriptorBuilder("NewLanguage.structure.State").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("name").children(new String[]{"transitions", "action", "loop", "frequency"}, new boolean[]{true, true, false, false}).create();
      case 9:
        return new ConceptDescriptorBuilder("NewLanguage.structure.Transition").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("actuatorTarget").references("nextStateRef").children(new String[]{"conditions"}, new boolean[]{true}).alias("transition", "").create();
      case 10:
        return new ConceptDescriptorBuilder("NewLanguage.structure.konami").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("command").references("ledA", "ledB", "buzzer", "joystick").alias("konami", "").create();
      case 11:
        return new ConceptDescriptorBuilder("NewLanguage.structure.macro").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("frequency").children(new String[]{"actuars"}, new boolean[]{true}).create();
      case 12:
        return new ConceptDescriptorBuilder("NewLanguage.structure.macro2").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("name").references("actuatorsRef").children(new String[]{"actuators", "states", "actions"}, new boolean[]{true, true, true}).create();
      default:
        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
  }

  private static String[] stringSwitchCases_1htk8d_a0a0b = new String[]{"NewLanguage.structure.Action", "NewLanguage.structure.Actuator", "NewLanguage.structure.ArduinoBoard", "NewLanguage.structure.Button", "NewLanguage.structure.Buzzer", "NewLanguage.structure.Condition", "NewLanguage.structure.Joystick", "NewLanguage.structure.Led", "NewLanguage.structure.State", "NewLanguage.structure.Transition", "NewLanguage.structure.konami", "NewLanguage.structure.macro", "NewLanguage.structure.macro2"};
}
